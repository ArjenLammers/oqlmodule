// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package oqladdon.actions;

import java.util.ArrayList;
import java.util.List;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.logging.ILogNode;
import com.mendix.webui.CustomJavaAction;
import oql.implementation.OQL;

/**
 * Add a list of objects to an OQL-statement or dataset. Just add the entity and the member of the object that you want to use for the IN-clause in your statement.
 */
public class AddListParameter extends CustomJavaAction<java.lang.Void>
{
	private java.lang.String name;
	private java.util.List<IMendixObject> objectList;
	private java.lang.String attributeName;

	public AddListParameter(IContext context, java.lang.String name, java.util.List<IMendixObject> objectList, java.lang.String attributeName)
	{
		super(context);
		this.name = name;
		this.objectList = objectList;
		this.attributeName = attributeName;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE
		if(this.objectList.size() > 0) {
			logger.trace("List to process");
			
			// Determine member with fallback options
			determineMember();
			
			// Validate member and optional escape format
			validateMember();

			// Create a list for the values
			List<Object> listOfItems = new ArrayList<Object>();
			
			// Foreach object
			this.objectList.forEach( objectInstance -> {
				// If there is a member, either provided as paramater or as constant default, we will get the value.
				// Else we will use the GUID as the default
				listOfItems.add(this.attributeName != null ? objectInstance.getValue(getContext(), attributeName)  : objectInstance.getId().toLong());
			});

			OQL.addParameter(name, listOfItems);
		}
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "AddListParameter";
	}

	// BEGIN EXTRA CODE

	// Lognode
	private static ILogNode logger = Core.getLogger(oqladdon.proxies.LogNodes.OQLAddOn.toString());
	
	// Default member when there is none provided in the action call
	private final String MEMBER_NAME_DEFAULT = oqladdon.proxies.constants.Constants.getAddListParameterDefaultMember();
	
	
	private void validateMember() throws CoreException {
		// If member is provided, check if it exists
		if (this.attributeName != null) {
			logger.trace("Validating member");	
			if (!this.objectList.get(0).hasMember(attributeName)) {
				throw new CoreException(this.objectList.get(0).getType() + " does not have a member with name " + attributeName);
			} 
		}
	}

	private void determineMember() {
		// Determine what we are going to do:
		// 1. Parameter
		// 2. Constant
		// 3. ID
		
		if(this.attributeName == null || this.attributeName.equalsIgnoreCase("")) {	
			// If there is no parameter value, fallback to the constant if that ain't ID;
			this.attributeName = isMemberIdentifier(this.MEMBER_NAME_DEFAULT) ? null : this.MEMBER_NAME_DEFAULT;
		} else  {
			// Parameter supplied, check if that is ID or not. If ID, then null, else parameter name
			this.attributeName = isMemberIdentifier(this.attributeName) ? null : this.attributeName;
		}
				
		logger.trace(String.format("The member value is [%s]", this.attributeName));
	}

	public boolean isMemberIdentifier(String member) {
		return member != null && (member.equalsIgnoreCase("ID") || member.equalsIgnoreCase("GUID") || member.equalsIgnoreCase(""));
	}	
		
	// END EXTRA CODE
}
