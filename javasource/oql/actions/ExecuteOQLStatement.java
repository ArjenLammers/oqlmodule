// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package oql.actions;

import java.util.LinkedList;
import java.util.List;
import java.util.Map.Entry;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataColumnSchema;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataRow;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataTable;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataTableSchema;
import com.mendix.systemwideinterfaces.connectionbus.requests.IParameterMap;
import com.mendix.systemwideinterfaces.connectionbus.requests.IRetrievalSchema;
import com.mendix.systemwideinterfaces.connectionbus.requests.types.IOQLTextGetRequest;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaAssociation;
import com.mendix.webui.CustomJavaAction;
import oql.implementation.OQL;

/**
 * This action executes a given OQL statement and accepts parameters.
 * Statements can easily be developed using the DataSet and one can use the Mendix documentation (https://docs.mendix.com/refguide7/oql) as reference.
 * 
 * For each column, the action expects an attribute in the result entity with the same name.
 * If the result is the ID of an object, it expects an association with the same name (without the module prefix).
 * 
 * Parameters given should be a list of OQL.Parameter, having at least the ParameterName and ParameterType set.
 * ParameterNames follow the syntax $Name
 * 
 * Example query (taken from OQL.IVK_PerformTests):
 * 
 * SELECT 
 * 	P.id ExamplePersonResult_ExamplePerson,
 * 	P.Name Name,
 * 	P.Number Number,
 * 	P.DateOfBirth DateOfBirth,
 * 	P.Age Age,
 * 	P.LongAge LongAge,
 * 	P.HeightInFloat HeightInFloat,
 * 	P.HeightInDecimal HeightInDecimal,
 * 	P.Active Active,
 * 	P.Gender Gender
 * FROM
 * 	OQL.ExamplePerson P
 * WHERE
 * 	P.Active = $Active AND
 * 	P.Age = $Age AND
 * 	P.DateOfBirth = $DateOfBirth AND
 * 	P.Gender = $Gender AND
 * 	P.HeightInDecimal = $HeightInDecimal AND
 * 	P.HeightInFloat = $HeightInFloat AND
 * 	P.LongAge = $LongAge AND
 * 	P.Name = $Name AND
 * 	P.Number = $Number
 * 
 */
public class ExecuteOQLStatement extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private String statement;
	private String returnEntity;
	private Long amount;
	private Long offset;

	public ExecuteOQLStatement(IContext context, String statement, String returnEntity, Long amount, Long offset)
	{
		super(context);
		this.statement = statement;
		this.returnEntity = returnEntity;
		this.amount = amount;
		this.offset = offset;
	}

	@Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		IContext context = getContext().createSudoClone();
		ILogNode logger = Core.getLogger(this.getClass().getSimpleName());
		IOQLTextGetRequest request = Core.createOQLTextGetRequest();
		request.setSecurityDisabled(true);
		request.setQuery(statement);
		IParameterMap parameterMap = request.createParameterMap();
		IRetrievalSchema schema = Core.createRetrievalSchema();
		schema.setOffset(offset);
		schema.setAmount(amount);
		request.setRetrievalSchema(schema);
		
		logger.debug("Mapping parameters.");
		
			
		for (Entry<String, Object> entry : OQL.getNextParameters().entrySet()) {
			parameterMap.put(entry.getKey(), entry.getValue());
		}
		request.setParameters(parameterMap);
		OQL.reset();
		
		List<IMendixObject> result = new LinkedList<IMendixObject>();
		logger.debug("Executing query");
		IDataTable results = Core.retrieveOQLDataTable(context, request);
		logger.debug("Mapping " + results.getRowCount() + " results.");
		IDataTableSchema tableSchema = results.getSchema();
		for (IDataRow row : results.getRows()) {
			IMendixObject targetObj = Core.instantiate(context, returnEntity);
			for (int i = 0; i < tableSchema.getColumnCount(); i++) {
				IDataColumnSchema columnSchema = tableSchema.getColumnSchema(i);
				logger.trace("Mapping column "+ columnSchema.getName());
				Object value = row.getValue(context, i);
				if (value != null && value instanceof IMendixIdentifier) {
					logger.trace("Treating as association");				
					/* Escaping an alias as described at https://docs.mendix.com/refguide7/oql-select-clause
					 * leads to an error when using dots e.g. (OQL.ExamplePerson_ExamplePersonResult).
					 * Therefore this action accepts the ExamplePerson_ExamplePersonResult part and searches for the
					 * association that has this in it.
					 */
					for (IMetaAssociation association : targetObj.getMetaObject().getDeclaredMetaAssociationsParent()) {
						String name = association.getName();
						name = name.substring(name.indexOf('.') + 1);
						if (name.equals(columnSchema.getName())) {
							targetObj.setValue(context, association.getName(), value);
						}
					}
				} else {
					logger.trace("Treating as value");
					targetObj.setValue(context, columnSchema.getName(), value);
				}
				
			}
			result.add(targetObj);
		}
		return result;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "ExecuteOQLStatement";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
